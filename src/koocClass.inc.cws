function	addClass(theBlock : node, class : value, theLegacy : value)
{
  if (!existVariable(theBlock.classes[class]))
    {
      insert theBlock.classes[class] = class;
      local  newBlock;

      if (theLegacy == "")
	theLegacy = "Object";

      local i = 0;

      cnormPatchInit(newBlock);
      if (class != "Object")
	{
	  cnormPatchDeclaration(newBlock, "typedef struct _class_" + theLegacy + "_ " + theLegacy + ";");
	  i = add(i, 1);
	}
      if (theLegacy == "Object")
	cnormPatchDeclaration(newBlock, "typedef struct _class_" + class + "_ { void* vtable; }" + class + ";");
      else
	cnormPatchDeclaration(newBlock, "typedef struct _class_" + class + "_ { " + theLegacy + " super; void* vtable; }" + class + ";");	
      if (class != "Object")
	cnormPatchDeclaration(newBlock, "struct _vtable_" + class + "_ { struct _vtable_" + theLegacy + "_* vtableLegacy; } vt" + class + ";");
      else
	cnormPatchDeclaration(newBlock, "struct _vtable_" + class + "_ {} vt" + class + ";");
      insert newBlock.block[i].legacy = theLegacy;

      pushItem theBlock;
      setall theBlock#back = newBlock.block[i];
      ref theBlock.classes[class] = theBlock#back;
      insert theBlock.types[class];
      ref theBlock.types[class] = theBlock#back;
      pushItem theBlock;
      setall theBlock#back = newBlock.block[add(i, 1)];

      insert theBlock.types[class].vtable;
      ref theBlock.types[class].vtable = theBlock#back;
    }
  else
    error("/!\\ Redefinition of class '" + class + "' /!\\");
}

function	koocClassNameVar(theClass : value, theBlock : node, theExpression : value)
{
  local		newCode;
    
  cnormPatchInit(newCode);
  cnormPatchDeclaration(newCode, theExpression);

  if (koocDecorTool_gettype(newCode.block[0].ctype) == "struct"
      || koocDecorTool_gettype(newCode.block[0].ctype) == "union"
      || koocDecorTool_getinfoType(newCode.block[0].ctype.infoType) == "typedef"
      || koocDecorTool_getinfoType(newCode.block[0].ctype.infoType) == "static"
      || koocDecorTool_gettype(newCode.block[0].ctype) == "enum");
  else
    {
      local		name = newCode.block[0].name;
      newCode.block[0].name = "M_" + lengthString(theClass) + theClass + "_" + koocDecorTool_getsymtype(newCode.block[0].type);
      newCode.block[0].name = koocDecorPrim(newCode.block[0], name);

      foreach class in theBlock
      {
	if (class.ctype.identifier == "_class_" + theClass + "_")
	  {
	    pushItem class.ctype.list;
	    setall class.ctype.list#back = newCode.block[0];
	  }
      }
    }
}

function	koocClassNameFunc(theClass : value, theBlock : node, theExpression : value, theVirtual : value)
{
  local newCode;
  cnormPatchInit(newCode);
  cnormPatchDeclaration(newCode, "typedef struct _class_" + theClass + "_ " + theClass + ";");
  cnormPatchDeclaration(newCode, theExpression);

  if (koocDecorTool_gettype(newCode.block[1].ctype) == "struct"
      || koocDecorTool_gettype(newCode.block[1].ctype) == "union"
      || koocDecorTool_getinfoType(newCode.block[1].ctype.infoType) == "typedef"
      || koocDecorTool_getinfoType(newCode.block[1].ctype.infoType) == "static"
      || koocDecorTool_gettype(newCode.block[1].ctype) == "enum");
  else
    {
      local		name = newCode.block[1].name;

      if (theVirtual == "" || theVirtual == "@member")
      	newCode.block[1].name = "M_" + lengthString(theClass) + theClass + "_" + koocDecorTool_getsymtype(newCode.block[1].type);
      else
      	newCode.block[1].name = "V_" + lengthString(theClass) + theClass + "_" + koocDecorTool_getsymtype(newCode.block[1].type);
      newCode.block[1].name = koocDecorPrim(newCode.block[1], name);

      local expr;
      cutString(theExpression, "(", expr);

      local func;      
      cnormPatchInit(func);
      cnormPatchDeclaration(func, "typedef struct _class_" + theClass + "_ " + theClass + ";");
      
      foreach vtable in theBlock
      {
      	if (vtable.ctype.identifier == "_vtable_" + theClass + "_") 
      	  {
	    local type = "";
	    theExpression = "(*" + newCode.block[1].name + ")(" + theClass + "*";

	    foreach info in newCode.block[1].ctype.infoType
	      type = type + key(info) + " ";
	    type = type + newCode.block[1].ctype.identifier + " ";
	    foreach point in newCode.block[1].ctype.pointer
	      type = type + "*";

	    if (expr[1] == "void);" || expr[1] == ");")
	      cnormPatchDeclaration(func, type + theExpression + ");");
	    else
	      cnormPatchDeclaration(func, type + theExpression + ", " + expr[1]);

      	    pushItem vtable.ctype.list;
      	    setall vtable.ctype.list#back = func.block[1];
      	  }
      }
    }
}

function	setNodeLegacy(theAst : node, theLegacyName : value, theChildBlock : reference, myClass : value)
{
  foreach file in theAst
  {
    foreach declaration in file.block
    {
      if (equalsIgnoreCase(declaration.ctype.identifier, theLegacyName))
	foreach block in declaration.ctype.list
	{
	  if (block.name != "vtable" && block.name != "super")
	    {
	      pushItem theChildBlock;
	      setall theChildBlock#back = block;
	      local theLegacy = coreString(theLegacyName, 7, 1);
	      local length = lengthString("M_" + lengthString(theLegacy) + theLegacy);
	      theChildBlock#back.name = "M_" + lengthString(myClass) + myClass + rightString(theChildBlock#back.name, sub(lengthString(theChildBlock#back.name), length));
	    }
	}
    }
  }
}

function	koocClassRecScan(theFile : node, theAst : node)
{
  foreach declaration in theFile.block
  {
    if (existVariable(declaration.ctype.identifier) && startString(declaration.ctype.identifier, "_class_"))
      if (existVariable(declaration.legacy))
	{
	  insert declaration.ctype.list;
	  setNodeLegacy(theAst, "_class_" + declaration.legacy + "_", declaration.ctype.list, declaration.name);
	}
  }
}

function	koocClassImpl(theClass : value, theBlock : node, theVirtual : value, FuncTable : reference)
{
  if (koocDecorTool_gettype(theBlock#back.ctype) == "struct"
      || koocDecorTool_gettype(theBlock#back.ctype) == "union"
      || koocDecorTool_getinfoType(theBlock#back.ctype.infoType) == "typedef"
      || koocDecorTool_getinfoType(theBlock#back.ctype.infoType) == "static"
      || koocDecorTool_gettype(theBlock#back.ctype) == "enum");
  else
    {
      local		name = theBlock#back.name;

      if (theVirtual == "" || theVirtual == "@member")
	theBlock#back.name = "M_" + lengthString(theClass) + theClass + "_" + koocDecorTool_getsymtype(theBlock#back.type);
      else
	theBlock#back.name = "V_" + lengthString(theClass) + theClass + "_" + koocDecorTool_getsymtype(theBlock#back.type);
      theBlock#back.name = koocDecorPrim(theBlock#back, name);

      invertArray(theBlock#back.list);
      if (endString(theBlock#back.name, "void") && existVariable(theBlock#back.list))
	removeVariable(theBlock#back.list);
      pushItem theBlock#back.list;
      local newCode;
      cnormPatchInit(newCode);
      cnormPatchDeclaration(newCode, "typedef struct _class_" + theClass + "_ " + theClass + ";");
      cnormPatchDeclaration(newCode, theClass + "* self");
      setall theBlock#back.list#back = newCode.block[1];
      invertArray(theBlock#back.list);
    }

  if (theBlock#back.type == "__FUNCTION__")
    pushItem FuncTable = theBlock#back.name;
}

function	koocClassCreateVtable(theBlock : node)
{
  foreach impl in theBlock.implementation
  {
    local		theExpression;
    local		newCode;
    foreach class in theBlock.classes
    {
      if (key(class) == key(impl))
	{
	  cnormPatchInit(newCode);

	  theExpression = "struct _vtable_" + key(impl) + "_ vt" + key(impl) + " = {";

	  if (existVariable(class.legacy) && key(class) != "Object")
	    {
	      theExpression = theExpression + "&vt" + class.legacy;
	      theExpression = theExpression + ", ";
	    }

	  local check;
	  foreach pointer in class.vtable.ctype.list
	  {
	    if (pointer.name != "vtableLegacy")
	      {
		check = 0;
		foreach func in impl
		{
		  if (func == pointer.name)
		    {
		      check = 1;
		      theExpression = theExpression + func;
		    }
		}
		if (check == 0)
		  theExpression = theExpression + "0";
		if (pointer.name != class.vtable.ctype.list#back.name)
		  theExpression = theExpression + ", ";
	      }
	  }
	  theExpression = theExpression + "};";
	    
	  cnormPatchDeclaration(newCode, theExpression);
	  pushItem theBlock;
	  setall theBlock#back = newCode.block[0];
	}
    }
  }
}

function	koocClassAddFunc(theClass : value, theBlock : node, theFunc : value)
{
  local newCode;

  cnormPatchInit(newCode);
  cnormPatchDeclaration(newCode, "typedef struct _class_" + theClass + "_ " + theClass + ";");
  cnormPatchDeclaration(newCode, theClass + "* " + theFunc + "();");
  pushItem theBlock;
  setall theBlock#back = newCode.block[1];
  insert theBlock.prototypes[theFunc];
  ref theBlock.prototypes[theFunc] = theBlock#back;
  koocDecorName(theBlock#back, theClass, theBlock);
}

function	koocClassImplAddFuncs(theBlock : node, theClass : value)
{
  foreach impl in theBlock.implementation
  {
    if (key(impl) == theClass && existVariable(impl[0]))
      {
	local	newCode;

	cnormPatchInit(newCode);
	cnormPatchDeclaration(newCode, "typedef struct _class_" + theClass + "_ " + theClass + ";");
	cnormPatchDeclaration(newCode, theClass + "* _" + lengthString(theClass) + theClass + "_function_" + theClass + "_point_5alloc_param_void()\
{\
return (malloc(sizeof(" + theClass + ")));\
}");
	cnormPatchDeclaration(newCode, theClass + "* _" + lengthString(theClass) + theClass + "_function_" + theClass + "_point_3new_param_void()\
{" + theClass + "* Obj = _" + lengthString(theClass) + theClass + "_function_" + theClass + "_point_5alloc_param_void();\
Obj->vtable = (void*)&vt" + theClass + ";\
((struct _vtable_" + theClass + "_*)Obj->vtable)->M_" + lengthString(theClass) + theClass + "_function_void_4init_param_void(Obj);\
}");
	pushItem theBlock;
	setall theBlock#back = newCode.block[1];
	pushItem theBlock;
	setall theBlock#back = newCode.block[2];
      }
  }
}
