#include "patchLib/cnormPatchLib.inc.cws"

function	koocTradgetVars(theBlock : node, theModule : value, theVar : value, decored_vars : reference)
{
  local curstart;
  local curname;
  curstart = "_" + lengthString(theModule) + theModule + "_variable_";
  curname = "_" + lengthString(theVar) + theVar;
  foreach var in theBlock.variables
  {
    if ((leftString(var.name, lengthString(curstart)) == curstart) && (rightString(var.name, lengthString(curname)) == curname))
      insert decored_vars[var.name] = var.name;
  }
}

function	koocTradTestVarType(theName : value, theModule : value)
{
  local strList;
  theName = rightString(theName, 2 + lengthString(theModule));
  cutString(theName, "_", strList);
  return (strList[3]);
}

function	koocTradVar(theBlock : node, theModule : value, theVar : value, theType : node)
{
  local decored_vars;
  if (existVariable(theType.pointer))
    error(theVar + " of type *" + theType.identifier + " has never been declared in " + theModule);    
  koocTradgetVars(theBlock, theModule, theVar, decored_vars);
  foreach var in decored_vars
  {
    if (koocTradTestVarType(var, theModule) == theType.identifier)
      return var;
  }
  error(theVar + " of type " + theType.identifier + " has never been declared in " + theModule);
}

function	koocTradgetType(theBlock : node, init : node, theVar : node, theNode : node, theAst : node)
{
  if (existVariable(theVar.ctype))
    {
      if (existVariable(init.conflict))
	init.value = koocTradVar(theAst, init.module, init.value, theVar.ctype);
      //if (existVariable(theVar.ctype))
      	//{
	  insert theNode.ctype = theVar.ctype;
	  ref theNode.ctype = theVar.ctype;
	  //}
      return ;
    }
  foreach var in theBlock.variables
  {
    if (key(var) == theVar.value)
      {
	if (existVariable(init.conflict))
	  init.value = koocTradVar(theAst, init.module, init.value, var.ctype);
	//if (existVariable(theVar.ctype))
	  //{
	    insert theNode.ctype = theVar.ctype;
	    ref theNode.ctype = theVar.ctype;
	    //	  }
	return ;
      }
  }
}

function	koocTradRecScan(Curr : node, theBlock : node, theAst : node)
{
  if (existVariable(Curr.right))
    {      
      koocTradRecScan(Curr.right, theBlock, theAst);
      if (existVariable(Curr.right.ctype))
	{
	  insert Curr.ctype = Curr.right.ctype;
	  ref Curr.ctype = Curr.right.ctype;
	}
    }
  if (existVariable(Curr.left))
    {
      koocTradRecScan(Curr.left, theBlock, theAst);
      if (existVariable(Curr.left.ctype))
	{
	  insert Curr.ctype = Curr.left.ctype;
	  ref Curr.ctype = Curr.left.ctype;
	}
    }
  if (existVariable(Curr.right.conflict))
    {
      koocTradgetType(theBlock, Curr.right, Curr.left, Curr, theAst);
      removeVariable(Curr.right.module);
      removeVariable(Curr.right.conflict);
    }
  if (existVariable(Curr.left.conflict))
    {
      koocTradgetType(theBlock, Curr.left, Curr.right, Curr, theAst);
      removeVariable(Curr.left.module);
      removeVariable(Curr.left.conflict);
    }
  foreach var in Curr
  {
    if (existVariable(var.block))
      koocTradRecScan(var.block, var.block, theAst);
    /* if (existVariable(var.condition)) */
    /*   koocTradRecScan(var.condition, var.condition, theAst); */
    /* if (existVariable(var.init)) */
    /*   koocTradRecScan(var.init, var.init, theAst); */
    /* if (existVariable(var.increment)) */
    /*   koocTradRecScan(var.increment, var.increment, theAst); */
    /* if (existVariable(var.stmt)) */
    /*   koocTradRecScan(var.stmt, var.stmt, theAst); */
    /* if (existVariable(var.else)) */
    /*   koocTradRecScan(var.else, var.else, theAst); */
    /* if (existVariable(var.then)) */
    /*   koocTradRecScan(var.then, var.then, theAst); */
    if (existVariable(var.right))
      koocTradRecScan(var.right, theBlock, theAst);
    if (existVariable(var.left))
      koocTradRecScan(var.left, theBlock, theAst);
    if (existVariable(var.right.conflict))
      {
	koocTradgetType(theBlock, var.right, var.left, var, theAst);
	removeVariable(var.right.module);
	removeVariable(var.right.conflict);
      }
    if (existVariable(var.left.conflict))
      {
	koocTradgetType(theBlock, var.left, var.right, var, theAst);
	removeVariable(var.left.module);
	removeVariable(var.left.conflict);
      }
  }
}

function	koocTradCopyRef(theFile : node, theAst : node)
{
  foreach import in theFile.import
  {
    foreach file in theAst
    {
      insert theFile.block.variables;
      if (key(import) == file)
	{
	  foreach var in file.block.variables
	  {
	    insert theFile.block.variables[key(var)] = var;
	    ref theFile.block.variables[key(var)] = var;
	  }
	}
    }
  }
}
