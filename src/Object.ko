@import "/usr/include/string.h"

@class Object
{
  Object	*alloc();
  Object	*new();
  @member
    {
      void	init();
      void	delete();
    }
  @virtual
    {
      void	clean();
      int	isKindOf(const char*);
      int	isKindOf(Object*);
      int	isInstanceOf(const char *);
      int	isInstanceOf(Object*);
    }
}

@implementation Object
{
  @member const char	*name_of_interface()
    {
      return ("Object");
    }

  Object	*alloc()
  {
    return (malloc(sizeof(Object)));
  }

  @member void	init()
    {
      [self.vtable] = malloc(sizeof(struct _vtable_Object_));
    }

  Object	*new()
  {
    Object	*Obj = [Object alloc];
    [Obj init];
  }

  @virtual void	clean()
    {
      free([self.vtable]);
    }

  @member void	delete()
    {
      [self clean];
      free(self);
    }

  @virtual int	isKindOf(const char* cname)
    {
      if (!strcmp([self name_of_interface], cname))
	return (1);
      return (0);
    }

  @virtual int	isKindOf(Object* Obj)
    {
      if (!strcmp([self name_of_interface], [Obj name_of_interface]))
	return (1);
      return (0);
    }

  @virtual int	isInstanceOf(const char* cname)
    {
      if (!strcmp([self name_of_interface], cname))
	return (1);
      return (0);
    }

  @virtual int	isInstanceOf(Object* Obj)
    {
      if (!strcmp([self name_of_interface], [Obj name_of_interface]))
	return (1);
      return (0);
    }
}
