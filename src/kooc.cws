#include "cnorm2c/cnorm2c.inc.cws"
#include "patchLib/cnormPatchLib.inc.cws"
#include "koocImpl.inc.cws"
#include "koocTrad.inc.cws"
#include "koocImport.inc.cws"
#include "Makegen.inc.cws"

local myAst;
local out;
local filelist;

foreach filename in _ARGS
{
  cutString(filename, "/", filelist);

  insert out[filelist#back] = replaceString(".kc", ".c", filename);
  out[filelist#back] = replaceString(".kh", ".h", out[filelist#back]);

  insert myAst.relPath = "";
  foreach path in filelist
  {
    if (path != filelist#back)
      myAst.relPath = myAst.relPath + path + '/';
  }
  if (!existVariable(myAst[filelist#back]))
    {
      if (existFile(out[filelist#back]))
	  deleteFile(out[filelist#back]);
      insert myAst[filelist#back] = filelist#back;
      insert myAst[filelist#back].import["Object.ko.kh"] = filelist#back;
      koocImportFile(myAst, "Object.ko.kh", filelist#back);
      parseAsBNF("kooc.cwp", myAst[filelist#back], filename);
    }
  foreach item in myAst[filelist#back].import
  {
    if (key(item) != "Object.ko.kh")
      {
	insert out[key(item)] = replaceString(".kh", ".h", myAst.relPath + key(item));
	out[key(item)] = replaceString(".kh", ".h", out[key(item)]);
      }
    else
      insert out["Object.ko.kh"] = "./lib/Object.ko.h";
  }
}

foreach file in myAst
{
  koocImplRecScan(file, myAst);
  koocTradRecScan(file.block, file.block, file.block);
  koocClassRecScan(file, myAst);
}

foreach file in myAst
{
  koocClassCreateVtable(file.block);  
  foreach import in file.import
  {
    if (import == file)
      {
	appendFile(out[file], "#ifndef " + toUpperString(replaceString("/", "_", replaceString(".", "_", replaceString(".kh", ".h", replaceString(".kc", ".c", key(import)))))) + "_\n");
	appendFile(out[file], "#define " + toUpperString(replaceString("/", "_", replaceString(".", "_", replaceString(".kh", ".h", replaceString(".kc", ".c", key(import)))))) + "_\n");
	appendFile(out[file], "#include \"" + replaceString(".kh", ".h", replaceString(".kc", ".c", key(import))) + "\"\n");
	appendFile(out[file], "#endif\n");
      }
  }
  appendFile(out[file], cnorm2c(file.block));
}

MakeGen(out);

saveProject("tree.xml", myAst);
