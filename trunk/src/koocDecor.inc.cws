function	koocDecorTool_getsymtype(theType : value)
{
  local theNewType;
  theNewType = coreString(theType, 2, 2);
  theNewType = toLowerString(theNewType);
  if (equalsIgnoreCase(theNewType, "prototype"))
    theNewType = "function";
  return theNewType;
}

function	koocDecorTool_gettype(theCType : node)
{
  if (existVariable(theCType.specifier))
    {
      if (theCType.specifier == "struct" || theCType.specifier == "union" || theCType.specifier == "enum")
	return theCType.specifier;
      return replaceString(" ", "", theCType.specifier) + "_" + theCType.identifier;
    }
  else
    return theCType.identifier;
}

function	koocDecorTool_getinfoType(theInfoType : node)
{
  local		infoTypeList = "";
  foreach infoType in theInfoType
  {
    if (equalsIgnoreCase(key(infoType), "static") || equalsIgnoreCase(key(infoType), "inline") || equalsIgnoreCase(key(infoType), "typedef"))
	return key(infoType);
    else if (key(infoType))
      infoTypeList = infoTypeList + "_" + key(infoType);
  }
  return infoTypeList;
}

function	koocDecorParam(theList : node)
{
  local	myParam = "";
  if (existVariable(theList.ctype.infoType))
    myParam = myParam + koocDecorTool_getinfoType(theList.ctype.infoType);
  if (existVariable(theList.ctype.sign))
    myParam = myParam + "_" + theList.ctype.sign;
  myParam = myParam + "_" + koocDecorTool_gettype(theList.ctype);
  foreach thePoint in theList.ctype.pointer
  {
    if (existVariable(thePoint.qualifier))
      myParam = myParam + "_" + thePoint.qualifier;
    else if (existVariable(thePoint.level))
      myParam = myParam + "_point";
  }
  return myParam;
}

function	koocDecorPrim(theDeclaration : node, name : value)
{
  if (existVariable(theDeclaration.ctype.infoType) && equalsIgnoreCase(koocDecorTool_getinfoType(theDeclaration.ctype.infoType), "inline"))
    error("use of inline is forbidden");
  else if (existVariable(theDeclaration.ctype.infoType) && !equalsIgnoreCase(koocDecorTool_gettype(theDeclaration.ctype), "variable"))
    theDeclaration.name = theDeclaration.name + koocDecorTool_getinfoType(theDeclaration.ctype.infoType);
  if (existVariable(theDeclaration.ctype.sign))
    theDeclaration.name = theDeclaration.name + "_" + theDeclaration.ctype.sign;
  theDeclaration.name = theDeclaration.name + "_" + koocDecorTool_gettype(theDeclaration.ctype);
  foreach thePoint in theDeclaration.ctype.pointer
  {
    if (existVariable(thePoint.qualifier))
      theDeclaration.name = theDeclaration.name + "_" + thePoint.qualifier;
    else if (existVariable(thePoint.level))
      theDeclaration.name = theDeclaration.name + "_point";
  }
  foreach thePoint in theDeclaration.ctype.array
    theDeclaration.name = theDeclaration.name + "_array" + thePoint;
  theDeclaration.name = theDeclaration.name + "_" + lengthString(name) + name;
  if (equalsIgnoreCase(koocDecorTool_getsymtype(theDeclaration.type), "function"))
    {
      theDeclaration.name = theDeclaration.name + "_param";
      if (isEmpty(theDeclaration.list))
	theDeclaration.name = theDeclaration.name + "_void";
      else
	foreach theList in theDeclaration.list
	  theDeclaration.name = theDeclaration.name + koocDecorParam(theList);
    }
  return (theDeclaration.name);
}

function	koocDecorName(theDeclaration : node, theModule : value, theBlock : node)
{
  if (koocDecorTool_gettype(theDeclaration.ctype) == "struct"
      || koocDecorTool_gettype(theDeclaration.ctype) == "union"
      || koocDecorTool_getinfoType(theDeclaration.ctype.infoType) == "typedef"
      || koocDecorTool_getinfoType(theDeclaration.ctype.infoType) == "static"
      || koocDecorTool_gettype(theDeclaration.ctype) == "enum");
  else
    {
      local		name = theDeclaration.name;
      theDeclaration.name = "_" + lengthString(theModule) + theModule + "_" + koocDecorTool_getsymtype(theDeclaration.type);
      theDeclaration.name = koocDecorPrim(theDeclaration, name);
      if (koocDecorTool_getsymtype(theDeclaration.type) == "variable")
      	{
      	  insert theBlock.variables[theDeclaration.name] = theBlock.variables[name];
      	  ref theBlock.variables[theDeclaration.name] = theBlock.variables[name];
      	  removeElement(theBlock.variables, name);
      	}
      else if (theDeclaration.type == "__PROTOTYPE__")
      	{
      	  insert theBlock.prototypes[theDeclaration.name] = theBlock.prototypes[name];
      	  ref theBlock.prototypes[theDeclaration.name] = theBlock.prototypes[name];
      	  removeElement(theBlock.prototypes, name);
      	}
    }
}
