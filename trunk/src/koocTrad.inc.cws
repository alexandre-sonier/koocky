#include "patchLib/cnormPatchLib.inc.cws"

function	koocTradgetVars(theBlock : node, theModule : value, theVar : value, decored_vars : reference)
{
  local curstart;
  local curname;
  curstart = "_" + lengthString(theModule) + theModule + "_variable_";
  curname = "_" + lengthString(theVar) + theVar;
  foreach var in theBlock.variables
  {
    if ((leftString(var.name, lengthString(curstart)) == curstart) && (rightString(var.name, lengthString(curname)) == curname))
      insert decored_vars[var.name] = var.name;
  }
}

function	koocTradTestVarType(theName : value, theModule : value, theCType : reference)
{
  local strList;
  cutString(theName, "_", strList);
  local i = 3;
  local j = 0;
  if (strList[i] != "signed" && strList[i] != "unsigned")
    insert theCType.identifier = strList[i];
  else
    {
      i = add(i, 1);
      insert theCType.identifier = strList[i];
    }
  i = add(i, 1);
  while (i < getArraySize(strList))
    {
      if (strList[i] == "point")
	{
	  insert theCType.pointer[j].level = "*";
	  j = add(j, 1);
	}
      i = add(i, 1);
    }
  return (theCType);
}

function	koocTradVar(theBlock : node, theModule : value, theVar : value, theType : node)
{
  local decored_vars;
  local theCType;
  koocTradgetVars(theBlock, theModule, theVar, decored_vars);
  foreach var in decored_vars
  {
    koocTradTestVarType(var, theModule, theCType);
    if (theCType.identifier == theType.identifier)
      {
	if (existVariable(theType.pointer) && existVariable(theCType.pointer))
	  {
	    if (equalTrees(theCType.pointer, theType.pointer))
	      return var;
	  }
	else if (!existVariable(theType.pointer))
	  return var;
      }
    clearVariable(theCType);
  }
  error(theVar + " of type " + theCType.identifier + " has never been declared in " + theModule);
}

function	koocTradgetType(theBlock : node, init : node, theVar : node, theNode : node, theAst : node)
{
  if (existVariable(init.ctype))
    {
      if (existVariable(init.conflict))
  	init.value = koocTradVar(theAst, init.module, init.value, init.ctype);
      insert theNode.ctype = init.ctype;
      ref theNode.ctype = init.ctype;
      return ;
    }
  if (existVariable(theVar.ctype))
    {
      if (existVariable(init.conflict))
	init.value = koocTradVar(theAst, init.module, init.value, theVar.ctype);
      insert theNode.ctype = theVar.ctype;
      ref theNode.ctype = theVar.ctype;
      return ;
    }
  foreach var in theBlock.variables
  {
    if (key(var) == theVar.value)
      {
	if (existVariable(init.conflict))
	  init.value = koocTradVar(theAst, init.module, init.value, var.ctype);
	insert theNode.ctype = var.ctype;
	ref theNode.ctype = var.ctype;
	return ;
      }
  }
  if (existVariable(theNode.ctype))
    {
      if (existVariable(init.conflict))
	init.value = koocTradVar(theAst, init.module, init.value, theNode.ctype);
      return ;
    }
}

function	koocTradRecScan(Curr : node, theBlock : node, theAst : node)
{
  if (existVariable(Curr.right))
    {      
      koocTradRecScan(Curr.right, theBlock, theAst);
      if (existVariable(Curr.right.ctype))
	{
	  insert Curr.ctype = Curr.right.ctype;
	  ref Curr.ctype = Curr.right.ctype;
	}
    }
  if (existVariable(Curr.left))
    {
      koocTradRecScan(Curr.left, theBlock, theAst);
      if (existVariable(Curr.left.ctype))
	{
	  insert Curr.ctype = Curr.left.ctype;
	  ref Curr.ctype = Curr.left.ctype;
	}
    }
  if (existVariable(Curr.right.conflict))
    {
      koocTradgetType(theBlock, Curr.right, Curr.left, Curr, theAst);
      removeVariable(Curr.right.module);
      removeVariable(Curr.right.conflict);
    }
  if (existVariable(Curr.left.conflict))
    {
      koocTradgetType(theBlock, Curr.left, Curr.right, Curr, theAst);
      removeVariable(Curr.left.module);
      removeVariable(Curr.left.conflict);
    }
  if (existVariable(Curr.list))
    koocTradRecScan(Curr.list, theBlock, theAst);
  if (existVariable(Curr.conflict) && existVariable(Curr.ctype))
    {
      koocTradgetType(theBlock, Curr, Curr, Curr, theAst);
      removeVariable(Curr.module);
      removeVariable(Curr.conflict);
    }
  foreach var in Curr
  {
    if (existVariable(var.block))
      koocTradRecScan(var.block, var.block, theAst);
    if (existVariable(var.list))
      koocTradRecScan(var.list, theBlock, theAst);
    if (existVariable(var.condition))
      koocTradRecScan(var.condition, theBlock, theAst);
    if (existVariable(var.case))
      koocTradRecScan(var.case, theBlock, theAst);
    if (existVariable(var.init))
      koocTradRecScan(var.init, theBlock, theAst);
    if (existVariable(var.increment))
      koocTradRecScan(var.increment, theBlock, theAst);
    if (existVariable(var.stmt))
      koocTradRecScan(var.stmt, theBlock, theAst);
    if (existVariable(var.else))
      koocTradRecScan(var.else, theBlock, theAst);
    if (existVariable(var.then))
      koocTradRecScan(var.then, theBlock, theAst);
    if (existVariable(var.right))
      koocTradRecScan(var.right, theBlock, theAst);
    if (existVariable(var.left))
      koocTradRecScan(var.left, theBlock, theAst);
    if (existVariable(var.right.conflict))
      {
	koocTradgetType(theBlock, var.right, var.left, var, theAst);
	removeVariable(var.right.module);
	removeVariable(var.right.conflict);
      }
    if (existVariable(var.left.conflict))
      {
	koocTradgetType(theBlock, var.left, var.right, var, theAst);
	removeVariable(var.left.module);
	removeVariable(var.left.conflict);
      }
    if (existVariable(var.conflict) && existVariable(var.ctype))
      {
    	koocTradgetType(theBlock, var, var, var, theAst);
    	removeVariable(var.module);
    	removeVariable(var.conflict);
      }
  }
}

function	koocTradFormType(theCType : node, thePoint : value)
{
  local i = 0;
  while (i < lengthString(thePoint))
    {
      pushItem theCType.pointer;
      insert theCType.pointer#back.level= "*";
      i = add(i, 1);
    }
}

function	koocTradCopyRef(theFile : node, theAst : node)
{
  foreach import in theFile.import
  {
    foreach file in theAst
    {
      insert theFile.block.variables;
      if (key(import) == file)
	{
	  foreach var in file.block.variables
	  {
	    insert theFile.block.variables[key(var)] = var;
	    ref theFile.block.variables[key(var)] = var;
	  }
	  foreach func in file.block.prototypes
	  {
	    insert theFile.block.prototypes[key(func)] = func;
	    ref theFile.block.prototypes[key(func)] = func;
	  }
	  foreach class in file.block.classes
	  {
	    insert theFile.block.classes[key(class)] = class;
	    ref theFile.block.classes[key(class)] = class;
	  }
	}
    }
  }
}
