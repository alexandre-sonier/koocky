#include "patchLib/cnormPatchLib.inc.cws"

function	koocTradgetVars(theBlock : node, theModule : node, theVar : value, decored_vars : reference)
{
  local curstart = "";
  local curname;
  local moduleName;

  if (existVariable(theBlock.types[theModule.name]))
    {
      moduleName = theModule.name;
      curstart = "M";
    }
  else if (existVariable(theModule.ctype.identifier))
    {
      moduleName = theModule.ctype.identifier;
      curstart = "M";
    }
  else
    moduleName = theModule;
  curstart = curstart + "_" + lengthString(moduleName) + moduleName + "_variable_";
  curname = "_" + lengthString(theVar) + theVar;
  if (existVariable(theModule.ctype.identifier))
    {
      foreach type in theBlock.types
      {
	if (moduleName == key(type))
	  foreach var in type.ctype.list
	  {
	    if ((leftString(var.name, lengthString(curstart)) == curstart) && (rightString(var.name, lengthString(curname)) == curname))
	      insert decored_vars[var.name] = var.name;
	  }
      }
    }
  else
    {
      foreach var in theBlock.variables
      {
	if ((leftString(var.name, lengthString(curstart)) == curstart) && (rightString(var.name, lengthString(curname)) == curname))
	  insert decored_vars[var.name] = var.name;
      }
    }
}

function	koocTradTestVarType(theName : value, theCType : reference)
{
  local strList;
  cutString(theName, "_", strList);
  local i = 3;
  local j = 0;
  if (strList[i] != "signed" && strList[i] != "unsigned")
    insert theCType.identifier = strList[i];
  else
    {
      i = add(i, 1);
      insert theCType.identifier = strList[i];
    }
  i = add(i, 1);
  while (i < getArraySize(strList))
    {
      if (strList[i] == "point")
	{
	  insert theCType.pointer[j].level = "*";
	  j = add(j, 1);
	}
      i = add(i, 1);
    }
  return (theCType);
}

function	koocTradVar(theAst : node, theBlock : node, init : node, theType : node)
{
  local decored_vars;
  local theCType;
  local module = init.module;

  foreach var in theBlock.variables
  {
    if (key(var) == init.module)
      setall module = var;
  }
  foreach var in theBlock#parent.list
  {
    if (var.name == init.module)
      setall module = var;
    else if (init.module == "super" && var.name == "self")
      setall module = theAst.types[theAst.types[var.ctype.identifier].legacy];
  }
  koocTradgetVars(theAst, module, init.value, decored_vars);
  foreach var in decored_vars
  {
    clearVariable(theCType);
    koocTradTestVarType(var, theCType);
    if (theCType.identifier == theType.identifier)
      {
	if (existVariable(theType.pointer) && existVariable(theCType.pointer))
	  {
	    if (equalTrees(theCType.pointer, theType.pointer))
	      return var;
	  }
	else if (!existVariable(theType.pointer))
	  return var;
      }
  }
  error(init.value + " of type " + theCType.identifier + " has never been declared in " + init.module);
}

function	koocTradClassCall(init : node, refy : value)
{
  local tmp;

  setall tmp = init;
  insert init.right;
  setall init.right = tmp;
  insert init.left;
  setall init.left = tmp;
  init.left.value = init.module;
  init.right.value = init.value;
  removeVariable(init.value);

  if (existVariable(init.__LINE__))
    {
      removeVariable(init.right.__LINE__);
      removeVariable(init.__LINE__);
    }

  if (refy == "&")
    {
      init.type = "field_expression";
      init.otype = "likebinary";
      init.operator = ".";
    }
  else if (init.module == "super")
    {
      init.type = "field_expression";
      init.otype = "likebinary";
      init.operator = ".";
      clearVariable(tmp);
      setall tmp = init;
      setall init.right = tmp;
      init.left.value = "self";
      init.type = "deref_expression";
      init.otype = "likebinary";
      init.operator = "->";      
    }
  else
    {
      init.type = "deref_expression";
      init.otype = "likebinary";
      init.operator = "->";
    }
}

function	koocTradgetType(theBlock : node, init : node, theVar : node, theNode : node, theAst : node)
{
  local refy = "";

  if (startString(init.module, "&"))
    {
      init.module = rightString(init.module, sub(lengthString(init.module), 1));
      refy = "&";
    }
  if (existVariable(init.ctype))
    {
      if (existVariable(init.conflict))
	{
	  if (init.value != "vtable")
	    init.value = koocTradVar(theAst, theBlock, init, init.ctype);
	  foreach var in theBlock.variables
	  {
	    if (key(var) == init.module)
	      koocTradClassCall(init, refy);
	  }
	  foreach var in theBlock#parent.list
	  {
	    if (var.name == init.module)
	      koocTradClassCall(init, refy);
	  }
	  if ("super" == init.module)
	    koocTradClassCall(init, refy);
	}
      insert theNode.ctype = init.ctype;
      ref theNode.ctype = init.ctype;
      return ;
    }
  if (existVariable(theVar.ctype))
    {
      if (existVariable(init.conflict))
	{
	  if (init.value != "vtable")
	    init.value = koocTradVar(theAst, theBlock, init, theVar.ctype);
	  foreach var in theBlock.variables
	  {
	    if (key(var) == init.module)
	      koocTradClassCall(init, refy);
	  }
	  foreach var in theBlock#parent.list
	  {
	    if (var.name == init.module)
	      koocTradClassCall(init, refy);
	  }
	  if ("super" == init.module)
	    koocTradClassCall(init, refy);
	}
      insert theNode.ctype = theVar.ctype;
      ref theNode.ctype = theVar.ctype;
      return ;
    }
  foreach var in theBlock.variables
  {
    if (key(var) == theVar.value)
      {
	if (existVariable(init.conflict))
	  {
	    if (init.value != "vtable")
	      init.value = koocTradVar(theAst, theBlock, init, var.ctype);
	    foreach var in theBlock.variables
	    {
	      if (key(var) == init.module)
		koocTradClassCall(init, refy);
	    }
	    foreach var in theBlock#parent.list
	    {
	      if (var.name == init.module)
		koocTradClassCall(init, refy);
	    }
	    if ("super" == init.module)
	      koocTradClassCall(init, refy);
	  }
	insert theNode.ctype = var.ctype;
	ref theNode.ctype = var.ctype;
	return ;
      }
  }
  if (existVariable(theNode.ctype))
    {
      if (existVariable(init.conflict))
	{
	  if (init.value != "vtable")
	    init.value = koocTradVar(theAst, theBlock, init, theNode.ctype);
	  foreach var in theBlock.variables
	  {
	    if (key(var) == init.module)
	      koocTradClassCall(init, refy);
	  }
	  foreach var in theBlock#parent.list
	  {
	    if (var.name == init.module)
	      koocTradClassCall(init, refy);
	  }
	  if ("super" == init.module)
	    koocTradClassCall(init, refy);
	}
      return ;
    }
}


function	koocTradFormType(theCType : node, thePoint : value)
{
  local i = 0;
  while (i < lengthString(thePoint))
    {
      pushItem theCType.pointer;
      insert theCType.pointer#back.level= "*";
      i = add(i, 1);
    }
}

function	koocTradnewFunc(theBlock : node, theDecl : value)
{
  local newCode;

  cnormPatchInit(newCode);
  cnormPatchStatement(newCode, theDecl);
  setall theBlock = newCode.block[0];
}

function	koocTradAddParam(theBlock : node, type : value, param : value)
{
  local newCode;

  cnormPatchInit(newCode);
  cnormPatchStatement(newCode, "f(" + param + ");");

  pushItem theBlock;
  setall theBlock#back = newCode.block[0].list[0];
}

function	koocTradVirtualScan(theNode : node, theModule : value , str : value, theBlock : node, theAst : node, refy : value, theClass : value, type : node, count : value)
{
  local tmp;
  local funcname;
  local i = 0;

  funcname = "_" + lengthString(type.name) + type.name + str;
  foreach func in type.vtable.ctype.list
  {
    if (func.name == "V" + funcname)
      theNode.left.value = "V" + funcname;
    if (theNode.left.value == func.name)
      {
	invertArray(theNode.list);
	pushItem theNode.list;
	insert theNode.list#back.type = "primary_expression";
	insert theNode.list#back.value = theModule;
	insert theNode.list#back.operator = "id";
	insert theNode.list#back.otype = "terminal";
	if (refy == "&")
	  {
	    setall tmp = theNode.list#back;
	    insert theNode.list#back.left;
	    setall theNode.list#back.left = tmp;
	    theNode.list#back.operator = "&";
	    theNode.list#back.type = "unary_expression";
	    theNode.list#back.otype = "unary";
	  }
	invertArray(theNode.list);
	setall tmp = theNode.list#back;
	insert theNode.list#back.right;
	setall theNode.list#back.right = tmp;
	insert theNode.list#back.type = "cast_expression";
	insert theNode.list#back.left;
	insert theNode.list#back.left.ctype;
	insert theNode.list#back.left.ctype.pctx;
	ref theNode.list#back.left.ctype.pctx = theBlock;
	insert theNode.list#back.left.ctype.type = "__COMPOSED__";
	insert theNode.list#back.left.ctype.identifier = type.name;
	insert theNode.list#back.left.ctype.pointer;
	pushItem theNode.list#back.left.ctype.pointer;
	insert theNode.list#back.left.ctype.pointer[0].level = "*";
	insert theNode.list#back.left.otype = "typecast";
	insert theNode.list#back.left.type = "type_cast_expression";
	insert theNode.list#back.left.operator = "()";
	insert theNode.list#back.otype = "cast";
	insert theNode.list#back.operator = "cast";
	insert theNode.list#back.ctype;
	ref theNode.list#back.ctype = theNode.list#back.left.ctype;
	removeVariable(theNode.list#back.value);

	setall tmp = theNode;
	insert theNode.right;
	setall theNode.right = tmp;
	removeVariable(theNode.list);
	theNode.type = "deref_expression";
	theNode.otype = "likebinary";
	theNode.operator = "->";
	removeVariable(theNode.left);
	insert theNode.left;
	insert theNode.left.expr;
	insert theNode.left.expr.type = "cast_expression";
	insert theNode.left.expr.left;
	insert theNode.left.expr.left.ctype;
	insert theNode.left.expr.left.ctype.pctx;
	ref theNode.left.expr.left.ctype.pctx = theBlock;
	insert theNode.left.expr.left.ctype.type = "__COMPOSED__";
	insert theNode.left.expr.left.ctype.identifier = "_vtable_" + theClass + "_";
	insert theNode.left.expr.left.ctype.specifier = "struct";
	insert theNode.left.expr.left.ctype.pointer;
	pushItem theNode.left.expr.left.ctype.pointer;
	insert theNode.left.expr.left.ctype.pointer[0].level = "*";
	insert theNode.left.expr.left.otype = "typecast";
	insert theNode.left.expr.left.type = "type_cast_expression";
	insert theNode.left.expr.left.operator = "()";
	insert theNode.left.expr.otype = "cast";
	insert theNode.left.expr.right;
	insert theNode.left.expr.right.left;
	insert theNode.left.expr.right.left.type = "primary_expression";
	insert theNode.left.expr.right.left.value = theModule;
	insert theNode.left.expr.right.left.operator = "id";
	insert theNode.left.expr.right.left.otype = "terminal";
	insert theNode.left.expr.right.type = "deref_expression";
	insert theNode.left.expr.right.otype = "likebinary";
	insert theNode.left.expr.right.operator = "->";
	insert theNode.left.expr.right.right;
	insert theNode.left.expr.right.right.type = "primary_expression";
	insert theNode.left.expr.right.right.value = "vtable";
	insert theNode.left.expr.right.right.operator = "id";
	insert theNode.left.expr.right.right.otype = "terminal";
	insert theNode.left.expr.operator = "cast";
	insert theNode.left.type = "priority_expression";
	insert theNode.left.otype = "priority";
	insert theNode.left.operator = "()";
	while (i < count)
	  {
	    setall tmp = theNode.left;
	    insert theNode.left.left;
	    setall theNode.left.left = tmp;
	    insert theNode.left.right;
	    insert theNode.left.right.type = "primary_expression";
	    insert theNode.left.right.value = "vtableLegacy";
	    insert theNode.left.right.operator = "id";
	    insert theNode.left.right.otype = "terminal";
	    insert theNode.left.type = "deref_expression";
	    insert theNode.left.otype = "likebinary";
	    insert theNode.left.operator = "->";
	    i = add(i, 1);
	  }
	return ;
      }
  }
  if (existVariable(type.legacy) && type.name != "Object")
    koocTradVirtualScan(theNode, theModule, str, theBlock, theAst, refy, theClass, theAst.types[type.legacy], add(count, 1));
}

function	koocTradFuncAdd(theNode : node, theTypes : node, theModule : value , str : value, theBlock : node, theAst : node, refy : value, var : node)
{
  local tmp;
  local funcname;

  if (var.name == theModule)
    foreach type in theAst.types
    {
      if (var.ctype.identifier == key(type))
	{
	  funcname = "_" + lengthString(key(type)) + key(type) + str;

	  foreach func in type.vtable.ctype.list
	  {
	    if (func.name == "V" + funcname)
	      theNode.left.value = "V" + funcname;
	    else if (func.name == "M" + funcname)
	      theNode.left.value = "M" + funcname;

	    if (theNode.left.value == func.name)
	      {
		invertArray(theNode.list);
		pushItem theNode.list;
		insert theNode.list#back.type = "primary_expression";
		insert theNode.list#back.value = theModule;
		insert theNode.list#back.operator = "id";
		insert theNode.list#back.otype = "terminal";
		if (refy == "&")
		  {
		    setall tmp = theNode.list#back;
		    insert theNode.list#back.left;
		    setall theNode.list#back.left = tmp;
		    theNode.list#back.operator = "&";
		    theNode.list#back.type = "unary_expression";
		    theNode.list#back.otype = "unary";
		  }
		invertArray(theNode.list);
		setall tmp = theNode;
		insert theNode.right;
		setall theNode.right = tmp;
		removeVariable(theNode.list);
		theNode.type = "deref_expression";
		theNode.otype = "likebinary";
		theNode.operator = "->";
		removeVariable(theNode.left);
		insert theNode.left;
		insert theNode.left.expr;
		insert theNode.left.expr.type = "cast_expression";
		insert theNode.left.expr.left;
		insert theNode.left.expr.left.ctype;
		insert theNode.left.expr.left.ctype.pctx;
		ref theNode.left.expr.left.ctype.pctx = theBlock;
		insert theNode.left.expr.left.ctype.type = "__COMPOSED__";
		insert theNode.left.expr.left.ctype.identifier = "_vtable_" + key(type) + "_";
		insert theNode.left.expr.left.ctype.specifier = "struct";
		insert theNode.left.expr.left.ctype.pointer;
		pushItem theNode.left.expr.left.ctype.pointer;
		insert theNode.left.expr.left.ctype.pointer[0].level = "*";
		insert theNode.left.expr.left.otype = "typecast";
		insert theNode.left.expr.left.type = "type_cast_expression";
		insert theNode.left.expr.left.operator = "()";
		insert theNode.left.expr.otype = "cast";
		insert theNode.left.expr.right;
		insert theNode.left.expr.right.left;
		insert theNode.left.expr.right.left.type = "primary_expression";
		insert theNode.left.expr.right.left.value = theModule;
		insert theNode.left.expr.right.left.operator = "id";
		insert theNode.left.expr.right.left.otype = "terminal";
		insert theNode.left.expr.right.type = "deref_expression";
		insert theNode.left.expr.right.otype = "likebinary";
		insert theNode.left.expr.right.operator = "->";
		insert theNode.left.expr.right.right;
		insert theNode.left.expr.right.right.type = "primary_expression";
		insert theNode.left.expr.right.right.value = "vtable";
		insert theNode.left.expr.right.right.operator = "id";
		insert theNode.left.expr.right.right.otype = "terminal";
		insert theNode.left.expr.operator = "cast";
		insert theNode.left.type = "priority_expression";
		insert theNode.left.otype = "priority";
		insert theNode.left.operator = "()";
		return ;
	      }
	  }
	  if (existVariable(type.legacy) && type.name != "Object")
	    koocTradVirtualScan(theNode, theModule, str, theBlock, theAst, refy, type.name, theAst.types[type.legacy], 1);
	}
    }
}

function	koocTradDecorFunc(theNode : node, theTypes : node, theModule : value , theName : value, theBlock : node, theAst : node)
{
  local ParsedType;
  local i;
  local tmp;

  theNode.left.value = "_" + lengthString(theModule) + theModule + "_function_";
  theNode.left.value = theNode.left.value;

  foreach type in theTypes
  {
    i = 0;
    pushItem ParsedType;
    cutString(type, "_", tmp);
    if (tmp[0] == "int" || tmp[0] == "char" || tmp[0] == "short" || tmp[0] == "long" || tmp[0] == "longlong")
      ParsedType#back = ParsedType#back + "signed_";
    ParsedType#back = ParsedType#back + tmp[0];
    while (i < lengthString(tmp[1]))
      {
	ParsedType#back = ParsedType#back + "_point";
	i = add(i, 1);
      }
  }

  theNode.left.value = theNode.left.value + ParsedType[0] + "_" + lengthString(theName) + theName + "_param";
  i = 1;  
  while (i < getArraySize(ParsedType))
    {
      theNode.left.value = theNode.left.value + "_" + ParsedType[i];
      i = add(i, 1);
    }

  if (i == 1)
    theNode.left.value = theNode.left.value + "_void";

  local tmp;
  local Length = rightString(leftString(theNode.left.value, 2), 1);
  local str = rightString(theNode.left.value, sub(lengthString(theNode.left.value), add(Length, 2)));
  local refy = "";

  if (startString(theModule, "&"))
    {
      theModule = rightString(theModule, sub(lengthString(theModule), 1));
      refy = "&";
    }

  foreach var in theBlock.variables
    koocTradFuncAdd(theNode, theTypes, theModule, str, theBlock, theAst, refy, var);

  foreach var in theBlock#parent.list
    koocTradFuncAdd(theNode, theTypes, theModule, str, theBlock, theAst, refy, var);
}

function	koocTradRecScan(Curr : node, theBlock : node, theAst : node)
{
  if (existVariable(Curr.funclict))
    {
      koocTradDecorFunc(Curr, Curr.paramtype, Curr.module, Curr.value, theBlock, theAst);
      removeVariable(Curr.paramtype);
      removeVariable(Curr.module);
      removeVariable(Curr.funclict);
    }
  if (existVariable(Curr.right))
    {
      koocTradRecScan(Curr.right, theBlock, theAst);
      if (existVariable(Curr.right.ctype))
	{
	  insert Curr.ctype = Curr.right.ctype;
	  ref Curr.ctype = Curr.right.ctype;
	}
    }
  if (existVariable(Curr.left))
    {
      koocTradRecScan(Curr.left, theBlock, theAst);
      if (existVariable(Curr.left.ctype))
	{
	  insert Curr.ctype = Curr.left.ctype;
	  ref Curr.ctype = Curr.left.ctype;
	}
    }
  if (existVariable(Curr.right.conflict))
    {
      koocTradgetType(theBlock, Curr.right, Curr.left, Curr, theAst);
      removeVariable(Curr.right.module);
      removeVariable(Curr.right.conflict);
    }
  if (existVariable(Curr.left.conflict))
    {
      koocTradgetType(theBlock, Curr.left, Curr.right, Curr, theAst);
      removeVariable(Curr.left.module);
      removeVariable(Curr.left.conflict);
    }
  if (existVariable(Curr.list))
    koocTradRecScan(Curr.list, theBlock, theAst);
  if (existVariable(Curr.conflict) && existVariable(Curr.ctype))
    {
      koocTradgetType(theBlock, Curr, Curr, Curr, theAst);
      removeVariable(Curr.module);
      removeVariable(Curr.conflict);
    }
  foreach var in Curr
  {
    if (existVariable(var.block))
      koocTradRecScan(var.block, var.block, theAst);
    if (existVariable(var.list))
      koocTradRecScan(var.list, theBlock, theAst);
    if (existVariable(var.condition))
      koocTradRecScan(var.condition, theBlock, theAst);
    if (existVariable(var.case))
      koocTradRecScan(var.case, theBlock, theAst);
    if (existVariable(var.init))
      koocTradRecScan(var.init, theBlock, theAst);
    if (existVariable(var.increment))
      koocTradRecScan(var.increment, theBlock, theAst);
    if (existVariable(var.stmt))
      koocTradRecScan(var.stmt, theBlock, theAst);
    if (existVariable(var.else))
      koocTradRecScan(var.else, theBlock, theAst);
    if (existVariable(var.then))
      koocTradRecScan(var.then, theBlock, theAst);
    if (existVariable(var.right))
      koocTradRecScan(var.right, theBlock, theAst);
    if (existVariable(var.left))
      koocTradRecScan(var.left, theBlock, theAst);
    if (existVariable(var.funclict))
      {
	koocTradDecorFunc(var, var.paramtype, var.module, var.value, theBlock, theAst);
	removeVariable(var.paramtype);
	removeVariable(var.module);
	removeVariable(var.funclict);
      }
    if (existVariable(var.right.conflict))
      {
	koocTradgetType(theBlock, var.right, var.left, var, theAst);
	removeVariable(var.right.module);
	removeVariable(var.right.conflict);
      }
    if (existVariable(var.left.conflict))
      {
	koocTradgetType(theBlock, var.left, var.right, var, theAst);
	removeVariable(var.left.module);
	removeVariable(var.left.conflict);
      }
    if (existVariable(var.conflict) && existVariable(var.ctype))
      {
	koocTradgetType(theBlock, var, var, var, theAst);
	removeVariable(var.module);
	removeVariable(var.conflict);
      }
  }
}
