#include "koocDecor.inc.cws"
#include "koocClass.inc.cws"

function	koocImplDecor(theBlock : node, theDeclaration : node, theImpl : value)
{
  local		name = theDeclaration.name;
  insert theDeclaration.impl = theImpl;
  koocDecorName(theDeclaration, theImpl, theBlock);
  if (theDeclaration.type == "__FUNCTION__")
    {
      insert theBlock.functions[theDeclaration.name] = theBlock.functions[name];
      ref theBlock.functions[theDeclaration.name] = theBlock.functions[name];
      removeElement(theBlock.functions, name);
    }
  else if (theDeclaration.type == "__PROTOTYPE__")
    error("@implementation " + theImpl + ": shouldn't contain a prototype.");
}

function	koocImplRecScan(theFile : node, theAst : node)
{
  local check;
  foreach var in theFile.block
  {
    if (existVariable(var.impl))
      {
	check = 0;
	if (var.type == "__FUNCTION__")
	  foreach func in theFile.block.prototypes
	    if (key(func) == var.name)
	      check = 1;
	if (check == 0)
	  error("function '" + var.name + "' implemented in '" + var.impl + "' was not declared in the corresponding module");
	removeElement(var, "impl");
      }
  }
  foreach import in theFile.import
  {
    foreach file in theAst
    {
      if (key(import) == file)
	{
	  if (existVariable(theFile.block.implementation) && existVariable(file.block.module))
	    foreach module in file.block.module
	    {
	      if (existVariable(theFile.block.implementation[module]))
		{
		  foreach var in file.block
		  {
		    if (existVariable(var.module) && module == var.module)
		      {
			pushItem theFile.block;
			setall theFile.block#back = var;
			var.ctype.infoType = add(var.infoType, 1);
			insert var.ctype.infoType["extern"] = "storageClassSpecifier";
			if (existVariable(var.init))
			  removeVariable(var.init);
		      }
		  }
		}
	    }
	}
    }
  }
}
